// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: proto/rooms.proto

package room

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomsClient is the client API for Rooms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*NewRoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	LeaveRoom(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// TODO: return stream here
	FindRoom(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*RoomsFoundResponse, error)
	RoomDetails(ctx context.Context, in *RoomDetailsRequest, opts ...grpc.CallOption) (Rooms_RoomDetailsClient, error)
}

type roomsClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsClient(cc grpc.ClientConnInterface) RoomsClient {
	return &roomsClient{cc}
}

func (c *roomsClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*NewRoomResponse, error) {
	out := new(NewRoomResponse)
	err := c.cc.Invoke(ctx, "/rooms.Rooms/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) JoinRoom(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/rooms.Rooms/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) LeaveRoom(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/rooms.Rooms/LeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) FindRoom(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*RoomsFoundResponse, error) {
	out := new(RoomsFoundResponse)
	err := c.cc.Invoke(ctx, "/rooms.Rooms/FindRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) RoomDetails(ctx context.Context, in *RoomDetailsRequest, opts ...grpc.CallOption) (Rooms_RoomDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rooms_ServiceDesc.Streams[0], "/rooms.Rooms/RoomDetails", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomsRoomDetailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rooms_RoomDetailsClient interface {
	Recv() (*RoomDetailsResponse, error)
	grpc.ClientStream
}

type roomsRoomDetailsClient struct {
	grpc.ClientStream
}

func (x *roomsRoomDetailsClient) Recv() (*RoomDetailsResponse, error) {
	m := new(RoomDetailsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomsServer is the server API for Rooms service.
// All implementations must embed UnimplementedRoomsServer
// for forward compatibility
type RoomsServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*NewRoomResponse, error)
	JoinRoom(context.Context, *JoinRequest) (*JoinResponse, error)
	LeaveRoom(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// TODO: return stream here
	FindRoom(context.Context, *SearchRequest) (*RoomsFoundResponse, error)
	RoomDetails(*RoomDetailsRequest, Rooms_RoomDetailsServer) error
	mustEmbedUnimplementedRoomsServer()
}

// UnimplementedRoomsServer must be embedded to have forward compatible implementations.
type UnimplementedRoomsServer struct {
}

func (UnimplementedRoomsServer) CreateRoom(context.Context, *CreateRoomRequest) (*NewRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomsServer) JoinRoom(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoomsServer) LeaveRoom(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedRoomsServer) FindRoom(context.Context, *SearchRequest) (*RoomsFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoom not implemented")
}
func (UnimplementedRoomsServer) RoomDetails(*RoomDetailsRequest, Rooms_RoomDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method RoomDetails not implemented")
}
func (UnimplementedRoomsServer) mustEmbedUnimplementedRoomsServer() {}

// UnsafeRoomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServer will
// result in compilation errors.
type UnsafeRoomsServer interface {
	mustEmbedUnimplementedRoomsServer()
}

func RegisterRoomsServer(s grpc.ServiceRegistrar, srv RoomsServer) {
	s.RegisterService(&Rooms_ServiceDesc, srv)
}

func _Rooms_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.Rooms/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.Rooms/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).JoinRoom(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.Rooms/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).LeaveRoom(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_FindRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).FindRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.Rooms/FindRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).FindRoom(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_RoomDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomDetailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomsServer).RoomDetails(m, &roomsRoomDetailsServer{stream})
}

type Rooms_RoomDetailsServer interface {
	Send(*RoomDetailsResponse) error
	grpc.ServerStream
}

type roomsRoomDetailsServer struct {
	grpc.ServerStream
}

func (x *roomsRoomDetailsServer) Send(m *RoomDetailsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Rooms_ServiceDesc is the grpc.ServiceDesc for Rooms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rooms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rooms.Rooms",
	HandlerType: (*RoomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Rooms_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Rooms_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _Rooms_LeaveRoom_Handler,
		},
		{
			MethodName: "FindRoom",
			Handler:    _Rooms_FindRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RoomDetails",
			Handler:       _Rooms_RoomDetails_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rooms.proto",
}
